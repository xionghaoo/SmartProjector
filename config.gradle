ext {
    packageName = 'com.ubtrobot.smartprojector'

    minSdkVersion = 21
    compileSdkVersion = 30
    targetSdkVersion = 25
    buildToolsVersion = '30.0.2'

    // ----------- dependencies version start -------------
    kotlin_version = '1.3.72'
    coreKtxVersion = "1.3.0"
    appcompatVersion = "1.1.0"
    dagger = "2.16"
    glideVersion = "4.9.0"
    gsonVersion = "2.8.6"
    kotlinCoroutinesVersion = "1.3.5"
    constraintLayoutVersion = "1.1.3"
    dexterVersion = "5.0.0"
    materialVersion = "1.0.0-rc01"
//        flexboxVersion = "0.3.2"
    recyclerviewVersion = "1.1.0"
//        browserVersion = '1.0.0'
    lifecycleVersion = '2.2.0'
    retrofitVersion = '2.3.0'
    roomVersion = '2.2.5'
    pagingVersion = '2.1.2'
    cardViewVersion = '1.0.0'
    okHttpVersion = '4.8.1'
    okHttpLogVersion = '4.8.1'
    smartRefreshLayoutVersion = '1.1.0-andx-8'
    qrcodeVersion = '1.3.6'
    lottieVersion = '3.0.7'
    cameraxVersion = "1.0.0-alpha04"
    timberVersion = '4.7.1'
    zxingCoreVersion = '3.3.0'
    legacySupportVersion = '1.0.0'
    flexboxVersion = "2.0.1"
    // ----------- dependencies version end -------------

    // ----------- 本地配置项 start -----------
    // 本地缓存数据库版本
    cache_db_version = '1'
    // 测试域名 test-ty
    domain_uat = '\"ip.jsontest.com\"'
    // 正式域名
    domain_prod = '\"xxx\"'
    // 预发布环境
    domain_pre = '\"xxx\"'

    tecentStorageHostUat = '\"https://cdn-vesta-dev.pgyscm.com\"'
    tecentStorageHost = '\"https://cdn-vesta-pro.pgyscm.com\"'
    // ----------- 本地配置项 end -----------

    // ----------- App版本管理 start ---------------
    def today = new Date().format('yyMMdd').toString()
    // 计算版本名称最后一个字符
    versionLastCharacter = { String path ->
        if (path.contains('debug')) return
        def fileNames = fileTree(path).filter { it.name.contains('.apk') }.files.name
        def lastChars = []
        fileNames.forEach { name ->
            def matcher = name =~ /_[uat|pre]*([0-9]+[a-z])_/
            if (matcher.find()) {
                def fileDate = matcher.findAll().first()[1]
                if (fileDate.contains(today)) {
                    // 列出今天创建的文件
                    def dateMatcher = fileDate =~ /[\d]+([a-z])/
                    def lastChar = dateMatcher.findAll().first()[1]
                    lastChars << (int)(lastChar.charAt(0))
                }
            }
        }
        if (lastChars.size() > 0) {
            return (char)(lastChars.max() + 1)
        } else {
            return 'a'
        }
    }
    def lastUatReleaseCharacter = versionLastCharacter("./uat/release")
    def lastPreReleaseCharacter = versionLastCharacter("./pre/release")
    // 正式环境
    prodVersionCode = 1
    prodVersionName = "1.0.0"

    // 测试环境
    uatVersionCode = 2
    uatVersionName = "${prodVersionName}_uat${today}${lastUatReleaseCharacter}"

    // 预发布环境
    preVerisonCode = 1
    preVersionName = "${prodVersionName}_pre${today}${lastPreReleaseCharacter}"

    // 重命名输出的apk文件，对测试环境和预发布环境apk文件自动命名
    renameApk = {
        android.applicationVariants.all { variant ->
            variant.outputs.all { path ->
                // example: uatRelease_v1.0.0_20200101a_1.apk
                outputFileName = "${variant.name}_v${variant.versionName}_${variant.versionCode}.apk"
            }
        }
    }
    // ----------- 版本管理 end ---------------
}
