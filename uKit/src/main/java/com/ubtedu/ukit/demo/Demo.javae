/**
 * ©2012-2018, UBTECH Robotics, Inc. All rights reserved (C)
 **/
package com.ubtedu.ukit.demo;

import java.util.ArrayList;
import java.util.List;

/**
 * @Author qinicy
 * @Date 2018/12/11
 **/
public class Demo {
    List<Project> sync() {
        if (isGuest) {
            offlineSync();
        } else {
            onlineSync();
        }
    }

    List<Project> offlineSync() {
        List<Project> localProjectList = loadLocalProjects();
        return localProjectList;
    }

    List<Project> loadLocalProjects() {
        List<Project> localProjectList = 从projects文件夹里遍历加载project;
        return localProjectList;
    }

    List<Project> loadServerProjects() {
        String api = "https://test79.ubtrobot.com/v1/course/user/data";

        List<Project> serverProjectList = request(api);
        return serverProjectList;
    }

    List<Project> onlineSync() {
        List<Project> localProjectList = loadLocalProjects();
        List<Project> serverProjectList = loadServerProjects();
        List<Project> mergedProjectList = merge(localProjectList, serverProjectList);
        //合并完需要更新本地数据的serverModifyTime
        updateProjectsModifyState(true, mergedProjectList, serverProjectList);
        //更新每一个项目的manifest.json
        updateProjectManifestFiles(mergedProjectList);
        uploadProjects(mergedProjectList);
        //合并完需要更新本地数据的serverModifyTime
        updateProjectsModifyState(false, mergedProjectList, serverProjectList);
        //更新每一个项目的manifest.json
        updateProjectManifestFiles(mergedProjectList);
    }

    List<Project> merge(List<Project> localProjectList, List<Project> serverProjectList) {
        1. 处理服务器已删除，本地还存在的工程；
        2. serverProjectList列表数据为空直接返回localProjectList，否则执行合并：

        List<Project> mergeList;
        for (Project serverProject : serverProjectList) {
            Project localProject = 从localProjectList遍历取到id = serverProject.id的project;
            Project mergeProject = mergeProject(localProject, serverProject);
            mergeList.add(mergeProject);
        }

        3. 遍历合并之后的mergeList，若本地列表不存在则添加进本地列表;
        List<Project> serverOnlyProjects = new ArrayList<>();
        for (Project p : mergeList) {
            Project p2 = localProjectList中拿id = p.id的project;
            if (p2 == null) {
                serverOnlyProjects.add(p);
            }
        }
        //加上本地没有的项目
        if (serverOnlyProjects.size() > 0) {
            localProjectList.projects.addAll(serverOnlyProjects);
        }

        //移除服务端已删除的项目
        localProjectList.projects.removeAll(removedProjects);
        return localProjectList;
    }

    Project mergeProject(Project localProject, Project serverProject) {
        if (serverProject != null) {
            if (localProject != null) {
                1. 处理本地已删除，但是服务端还存在的情况；
                2：
                boolean isNeedDownloadZip = serverProject.serverModifyTime != localProject.serverModifyTime;
                //isNeedDownloadZip = false意味着不需要合并了
                if (isNeedDownloadZip) {
                    //既然是合并，必然是已编辑状态
                    1. localProject.isModified = true;
                    2. 下载解压加载serverProject；
                    3. mergeProjectFiles(localProject, serverProject);
                    return localProject;
                }

            } else {
                //服务器有，本地没有。直接下载服务端的项目文件并解压到本地projects目录下，但是需要注意更新以下：
                serverProject.isModified = false;
                serverProject.localModifyTime = server.serverModifyTime;
                //等会记得把serverProject加入本地列表
                return serverProject;
            }
        }
    }

    List<project> mergeProjectFiles(Project localProject, Project serverProject) {
        //按照规则合并项目文件;
        //合并Blockly
        if (serverProject.blocklyList != null && serverProject.blocklyList.size() > 0) {
            ...
        }
        //合并motion
        if (serverProject.motionList != null && serverProject.motionList.size() > 0) {
            ...
        }
        //合并controller
        if (serverProject.controllerList != null && serverProject.controllerList.size() > 0) {
            ...
        }
        //合并doodle
        if (serverProject.doodleList != null && serverProject.doodleList.size() > 0) {
            ...
        }
        //合并model
        if (serverProject.modelInfo != null) {
            if (localProject.modelInfo != null && localProject.modelInfo.modifyTime < serverProject.modelInfo.modifyTime) {
                ...
            }
        }
        //合并Project本身
        if (localProject.localModifyTime < serverProject.serverModifyTime) {
            localProject.projectName = serverProject.projectName;
            localProject.imgUrl = serverProject.imgUrl;
        }
        return 合并后的项目
    }

    void updateProjectManifestFiles(List<Project> mergedProjectList) {
        更新mergedProjectList中的每一个manifest.json文件信息
    }

    void uploadProjects(List<Project> mergedProjectList) {
        //压缩并上传各个文件
        for (Project project : mergedProjectList) {
            //只有修改过的才需要重新上传
            if (!project.isModified) {
                continue;
            }
            1. 把project文件压缩成zip;
            2. 调用阿里云SDK上传项目zip文件，并更新project.objectKey = 刚上传的objectKey；
            3. project.md5 = CHECK MD5(android还没做);
            4. 上传project封面图片，并得到上传后的图片URL，更新project.imgUrl = imageUrl;
            5. 使用project.localModifyTime作为 "https://test79.ubtrobot.com/v1/course/user/project"
            的modifyTime参数，调用接口更新;
            6. 上一步成功后，更新serverModifyTime, project.serverModifyTime = project.localModifyTime;
        }
    }

    void updateProjectsModifyState(boolean isBeforeSync, List<Project> mergedProjectList, List<Project> serverProjectList) {
        for (Project project : mergedProjectList) {
            if (isBeforeSync) {
                Project serverProject = 从serverProjectList遍历得到id == project.id的服务端project;
                if (serverProject != null) {
                    localProject.serverModifyTime = serverProject.serverModifyTime;
                    //如果服务器的修改时间比本地的修改时间大，则需要更新本地修改时间
                    if (localProject.localModifyTime < serverProject.serverModifyTime) {
                        localProject.localModifyTime = serverProject.serverModifyTime;
                    }
                }
            } else {
                localProject.isModified = false;
            }
        }
    }

}
